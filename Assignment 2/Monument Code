import * as THREE from "https://unpkg.com/three@0.126.1/build/three.module.js"

// import Orbit controls
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 1, 800 );
camera.position.set( 0, 0, 7 );
camera.lookAt( 0, 0, 0 );

//front face half 1
const points = [];
const material = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points.push( new THREE.Vector3( -27, 500, 27 ) );
points.push( new THREE.Vector3( -27, 0, 27 ) )
points.push( new THREE.Vector3( 27, 0, 27 ) );
points.push( new THREE.Vector4( -27, 500, 27 ) );

const geometry = new THREE.BufferGeometry().setFromPoints( points );
const line = new THREE.Line( geometry, material );

//front face half 2
const points1 = [];
const material1 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points1.push( new THREE.Vector3( -27, 500, 27 ) );
points1.push( new THREE.Vector3( 27, 0, 27 ) )
points1.push( new THREE.Vector3( 27, 500, 27 ) );
points1.push( new THREE.Vector4( -27, 500, 27 ) );

const geometry1 = new THREE.BufferGeometry().setFromPoints( points1 );
const line1 = new THREE.Line( geometry1, material1 );

//-------------------------------------------------------------------------------

const points2 = [];
const material2 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points2.push( new THREE.Vector3( 27, 500, -27 ) );
points2.push( new THREE.Vector3( 27, 0, -27 ) )
points2.push( new THREE.Vector3( 27, 0, 27 ) );
points2.push( new THREE.Vector4( 27, 500, -27 ) );

const geometry2 = new THREE.BufferGeometry().setFromPoints( points2 );
const line2 = new THREE.Line( geometry2, material2 );

//front face half 2
const points3 = [];
const material3 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points3.push( new THREE.Vector3( 27, 500, -27 ) );
points3.push( new THREE.Vector3( 27, 0, 27 ) )
points3.push( new THREE.Vector3( 27, 500, 27 ) );
points3.push( new THREE.Vector4( 27, 500, -27 ) );

const geometry3 = new THREE.BufferGeometry().setFromPoints( points3 );
const line3 = new THREE.Line( geometry3, material3 );

//------------------------------------------------------------------------

const points4 = [];
const material4 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points4.push( new THREE.Vector3( -27, 500, -27 ) );
points4.push( new THREE.Vector3(-27, 0, -27 ) )
points4.push( new THREE.Vector3( 27, 0, -27 ) );
points4.push( new THREE.Vector4( -27, 500, -27 ) );

const geometry4 = new THREE.BufferGeometry().setFromPoints( points4 );
const line4 = new THREE.Line( geometry4, material4 );

//front face half 2
const points5 = [];
const material5 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points5.push( new THREE.Vector3( 27, 500, -27 ) );
points5.push( new THREE.Vector3( 27, 0, -27 ) )
points5.push( new THREE.Vector3( 27, 500, -27 ) );
points5.push( new THREE.Vector4( 27, 500, -27 ) );

const geometry5 = new THREE.BufferGeometry().setFromPoints( points5 );
const line5 = new THREE.Line( geometry5, material5 );


const points6 = [];
const material6 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points6.push( new THREE.Vector3( -27, 500, -27 ) );
points6.push( new THREE.Vector3( 27, 0, -27 ) )
points6.push( new THREE.Vector3( 27, 500, -27 ) );
points6.push( new THREE.Vector4( -27, 500, -27 ) );

const geometry6 = new THREE.BufferGeometry().setFromPoints( points6 );
const line6 = new THREE.Line( geometry6, material6 );

//---------------------------------------------------------------------

const points7 = [];
const material7 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points7.push( new THREE.Vector3( -27, 500, -27 ) );
points7.push( new THREE.Vector3( -27, 0, -27 ) )
points7.push( new THREE.Vector3( -27, 0, 27 ) );
points7.push( new THREE.Vector4( -27, 500, -27 ) );

const geometry7 = new THREE.BufferGeometry().setFromPoints( points7 );
const line7 = new THREE.Line( geometry7, material7 );


//front face half 2
const points8 = [];
const material8 = new THREE.MeshBasicMaterial({color: 0x00FF00} ); 
points8.push( new THREE.Vector3( 27, 500, -27 ) );
points8.push( new THREE.Vector3( 27, 0, 27 ) )
points8.push( new THREE.Vector3( -27, 500, 27 ) );
points8.push( new THREE.Vector4( -27, 500, -27 ) );

const geometry8 = new THREE.BufferGeometry().setFromPoints( points8 );
const line8 = new THREE.Line( geometry8, material8 );





const scene = new THREE.Scene();

renderer.render( scene, camera );

function animate() {
  renderer.render(scene, camera)
  
  scene.add(line);
  scene.add(line1);
  scene.add(line2);
  scene.add(line3);
  scene.add(line4);
  scene.add(line5);
  scene.add(line6);
  scene.add(line7);
  scene.add(line8);

  
   requestAnimationFrame(animate);
  }
  
var controls = new OrbitControls (camera, renderer.domElement);


animate();
