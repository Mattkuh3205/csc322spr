import * as THREE from "https://unpkg.com/three@0.126.1/build/three.module.js"

// import Orbit controls
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 800 );
camera.position.set( 0, 0, 7 );
camera.lookAt( 0, 0, 0 );


const scene = new THREE.Scene();

const geometry = new THREE.BufferGeometry();
const geometry2 = new THREE.BufferGeometry();
const geometry3 = new THREE.BufferGeometry();
const geometry4 = new THREE.BufferGeometry();

const geometry5 = new THREE.BufferGeometry();


// y - all -1 should be 0, all 1 should be 500
//x - all -1 should be -27 and all 1 should be 27
// z- all 1 should be 27 and all -1 should be -27

// create a simple square shape. We duplicate the top left and bottom right
// vertices because each vertex needs to appear once per triangle.
const vertices = new Float32Array( [
	-1.0, 0,  1.0, // v0
	 1.0, 0,  1.0, // v1
	 1.0,  500,  1.0, // v2

	 1.0,  500,  1.0, // v3
	-1.0,  500,  1.0, // v4
	-1.0, 0,  1.0  // v5
] );

// itemSize = 3 because there are 3 values (components) per vertex
geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
const material = new THREE.MeshBasicMaterial( { color: 0xfff000 } );
const mesh1 = new THREE.Mesh( geometry, material );

//-----------------------------------------------

const vertices2 = new Float32Array( [
	-1.0, 0,  1.0, // v0
	 1.0, 0,  1.0, // v1
	 1.0,  500,  1.0, // v2

	 1.0,  500,  1.0, // v3
	-1.0,  500,  1.0, // v4
	-1.0, 0 ,  1.0  // v5
] );

// itemSize = 3 because there are 3 values (components) per vertex
geometry2.setAttribute( 'position', new THREE.BufferAttribute( vertices2, 3 ) );
const material2 = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
const mesh2 = new THREE.Mesh( geometry2, material2 );

//--------------------------------------------------------

const vertices3 = new Float32Array( [
	-1.0, 0,  1.0, // v0
	 1.0, 0,  1.0, // v1
	 1.0,  500,  1.0, // v2

	 1.0,  500,  1.0, // v3
	-1.0,  500,  1.0, // v4
	-1.0,  0,  1.0  // v5
] );

// itemSize = 3 because there are 3 values (components) per vertex
geometry3.setAttribute( 'position', new THREE.BufferAttribute( vertices3, 3 ) );
const material3 = new THREE.MeshBasicMaterial( { color: 0xfffff0 } );
const mesh3 = new THREE.Mesh( geometry3, material3 );

//---------------------------------------------------------------

const vertices4 = new Float32Array( [
	-1.0,  0,  1.0, // v0
	 1.0, 0,  1.0, // v1
	 1.0,  500,  1.0, // v2

	 1.0,  500,  1.0, // v3
	-1.0,  500,  1.0, // v4
	-1.0, 0,  1.0  // v5
] );

//------------------------------------------------------------------
// itemSize = 3 because there are 3 values (components) per vertex

geometry4.setAttribute( 'position', new THREE.BufferAttribute( vertices4, 3 ) );
const material4 = new THREE.MeshBasicMaterial( { color: 0x00f0f0 } );
const mesh4 = new THREE.Mesh( geometry4, material4 );

//---------------------------------------------------------------








// ADD TO SCENE
renderer.render( scene, camera );

function animate() {
  renderer.render(scene, camera)
  scene.add(mesh1);
  scene.add(mesh2);
  scene.add(mesh3);
  scene.add(mesh4);


  mesh3.position.set(0.115,0,-1.95);
  mesh2.position.set(0.07,0,-0.035);
  mesh4.position.set(-1.9,0,-0.035);


  mesh2.rotation.y = 1.5;
  mesh4.rotation.y = 1.5

  }
  renderer.setAnimationLoop(animate);
 



var controls = new OrbitControls (camera, renderer.domElement);


animate();
