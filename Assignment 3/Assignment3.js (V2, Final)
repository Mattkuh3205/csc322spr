// Import THREE
import * as THREE from 
'https://threejsfundamentals.org/threejs/resources/threejs/r132/build/three.module.js';
// Import OrbitControls
import { OrbitControls } from 
'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';
// Create renderer
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
// Create camera
const camera = new THREE.PerspectiveCamera(45, window.innerWidth / 
window.innerHeight, 1, 500);
camera.position.set(0, 0, 100);
// Create OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true; // Adds smooth motion
controls.dampingFactor = 0.05;
controls.screenSpacePanning = false;
controls.minDistance = 10;
controls.maxDistance = 200;
// Create scene
const scene = new THREE.Scene();


// Create a circle
const a =2*Math.PI;
const circleMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 });
const circlePoints = [];
const radius = 100; // Circle radius
const segments = 200; // Number of segments to approximate the circle

for (let i = 0; i <= segments; i++) {
const theta = (i / segments) * 2 * Math.PI;
const x = a*Math.cos(theta)*Math.sin(theta);
const y = a*Math.sin(theta)-a;
//used the parametric equation x = a*cos(theta)*sin(theta), y = a*sin(theta)-a

circlePoints.push(new THREE.Vector3(x, y,0));

}

const circleGeometry = new THREE.BufferGeometry().setFromPoints(circlePoints);
const circle = new THREE.Line(circleGeometry, circleMaterial);
scene.add(circle);

// Animation loop for rendering and controls update
function animate() {
requestAnimationFrame(animate);
controls.update(); // Required for damping to work
renderer.render(scene, camera);

circle.rotation.z = 1.5
}
// Start the animation loop
animate();
